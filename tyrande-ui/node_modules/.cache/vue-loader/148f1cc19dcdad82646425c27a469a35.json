{"remainingRequest":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\other4\\Tyrande\\tyrande-ui\\src\\views\\system\\sysdictkey\\sysdictkey.vue?vue&type=style&index=0&id=6c36a4ae&lang=scss&scoped=true&","dependencies":[{"path":"D:\\other4\\Tyrande\\tyrande-ui\\src\\views\\system\\sysdictkey\\sysdictkey.vue","mtime":1597643615000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kaWN0X2tleS1jbGFzcyB7CiAgbWFyZ2luLXJpZ2h0OiAtNXB4Owp9CgouZGljdC12YWx1ZS1jbGFzcyB7CiAgbWFyZ2luLWxlZnQ6IC01cHg7Cn0K"},{"version":3,"sources":["sysdictkey.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwgBA;AACA;AACA;;AAEA;AACA;AACA","file":"sysdictkey.vue","sourceRoot":"src/views/system/sysdictkey","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 查询条件 -->\n    <el-card>\n      <el-form :inline=\"true\" :model=\"searchForm\" class=\"app-container-searchForm\">\n        <el-form-item label=\"字典名称\">\n          <el-input v-model=\"searchForm.dictName\" placeholder=\"字典名称\" />\n        </el-form-item>\n        <el-form-item label=\"字典项\">\n          <el-input v-model=\"searchForm.dictKey\" placeholder=\"字典项\" />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"getPageList\">\n            {{ defaultSettings.btnSearch }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <el-row :gutter=\"20\">\n      <!-- 字典项表格 -->\n      <el-col :span=\"11\">\n        <el-card class=\"dict_key-class\">\n          <el-row class=\"app-container-toolbar\">\n            <el-button\n              type=\"primary\"\n              icon=\"el-icon-circle-plus-outline\"\n              @click=\"visibleConfig.add = true\"\n            >\n              {{ defaultSettings.btnAdd }}\n            </el-button>\n\n            <el-button\n              type=\"warning\"\n              icon=\"el-icon-refresh\"\n              @click=\"refreshCache\"\n            >刷新缓存\n            </el-button>\n          </el-row>\n          <el-table\n            ref=\"dictKeyTable\"\n            border\n            :data=\"gridData.list\"\n            highlight-current-row\n            @current-change=\"handleRowChange\"\n            @row-click=\"dictKeyRowClick\"\n          >\n            <el-table-column type=\"index\" label=\"序号\" width=\"50\" />\n            <el-table-column prop=\"dictName\" label=\"字典名称\" />\n            <el-table-column prop=\"dictKey\" label=\"字典项\" />\n            <el-table-column prop=\"dictDesc\" label=\"字典描述\" />\n            <el-table-column fixed=\"right\" label=\"操作\" width=\"130\">\n              <template slot-scope=\"scope\">\n                <el-button\n                  type=\"text\"\n                  icon=\"el-icon-edit\"\n                  size=\"small\"\n                  @click=\"doEdit(scope.row.id)\"\n                >\n                  {{ defaultSettings.btnEdit }}\n                </el-button>\n                <el-button\n                  type=\"text\"\n                  icon=\"el-icon-delete\"\n                  size=\"small\"\n                  @click=\"doDelete(scope.row.id)\"\n                >{{ defaultSettings.btnDelete }}\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n\n          <!-- 分页区域 -->\n          <el-pagination\n            :current-page=\"searchForm.current\"\n            :layout=\"defaultSettings.page\"\n            :total=\"gridData.total\"\n            @current-change=\"handleCurrentChange\"\n          />\n        </el-card>\n      </el-col>\n\n      <!-- 字典值表格 -->\n      <el-col :span=\"13\">\n        <el-card class=\"dict-value-class\">\n          <el-row class=\"app-container-toolbar\">\n            <el-button\n              type=\"primary\"\n              icon=\"el-icon-circle-plus-outline\"\n              @click=\"dictValueAdd\"\n            >\n              {{ defaultSettings.btnAdd }}\n            </el-button>\n          </el-row>\n          <el-table border :data=\"gridData_value.list\" max-height=\"640\">\n            <el-table-column type=\"index\" label=\"序号\" width=\"50\" />\n            <el-table-column prop=\"dictRealValue\" label=\"真实值\" />\n            <el-table-column prop=\"dictValue\" label=\"展示值\" />\n            <el-table-column prop=\"dictOrder\" label=\"字典顺序\" />\n            <el-table-column fixed=\"right\" label=\"操作\" width=\"130\">\n              <template slot-scope=\"scope\">\n                <el-button\n                  type=\"text\"\n                  icon=\"el-icon-edit\"\n                  size=\"small\"\n                  @click=\"doValueEdit(scope.row.id)\"\n                >\n                  {{ defaultSettings.btnEdit }}\n                </el-button>\n                <el-button\n                  type=\"text\"\n                  icon=\"el-icon-delete\"\n                  size=\"small\"\n                  @click=\"doValueDelete(scope.row.id)\"\n                >{{ defaultSettings.btnDelete }}\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 字典项添加 -->\n    <el-dialog\n      :title=\"defaultSettings.btnAdd\"\n      :visible.sync=\"visibleConfig.add\"\n      width=\"50%\"\n      @close=\"doAddClose\"\n    >\n      <span>\n        <el-form ref=\"addFormRef\" :model=\"addForm\" :rules=\"addCheckRules\" label-width=\"120px\">\n          <el-form-item label=\"字典名称\" prop=\"dictName\">\n            <el-input v-model=\"addForm.dictName\" />\n          </el-form-item>\n          <el-form-item label=\"字典项\" prop=\"dictKey\">\n            <el-input v-model=\"addForm.dictKey\" />\n          </el-form-item>\n          <el-form-item label=\"字典描述\" prop=\"dictDesc\">\n            <el-input v-model=\"addForm.dictDesc\" />\n          </el-form-item>\n        </el-form>\n      </span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          @click=\"visibleConfig.add = false\"\n        >{{ defaultSettings.cancelButtonText }}</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"doAddSave\"\n        >{{ defaultSettings.confirmButtonText }}</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 字典项编辑 -->\n    <el-dialog\n      :title=\"defaultSettings.btnEdit\"\n      :visible.sync=\"visibleConfig.edit\"\n      width=\"50%\"\n      @close=\"doEditClose\"\n    >\n      <span>\n        <el-form ref=\"editFormRef\" :model=\"editForm\" :rules=\"editCheckRules\" label-width=\"120px\">\n          <el-form-item label=\"字典名称\" prop=\"dictName\">\n            <el-input v-model=\"editForm.dictName\" />\n          </el-form-item>\n          <el-form-item label=\"字典项\" prop=\"dictKey\">\n            <el-input v-model=\"editForm.dictKey\" disabled />\n          </el-form-item>\n          <el-form-item label=\"字典描述\" prop=\"dictDesc\">\n            <el-input v-model=\"editForm.dictDesc\" />\n          </el-form-item>\n        </el-form>\n      </span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          @click=\"visibleConfig.edit = false\"\n        >{{ defaultSettings.cancelButtonText }}</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"doEditSave\"\n        >{{ defaultSettings.confirmButtonText }}</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 字典值添加 -->\n    <el-dialog\n      :title=\"defaultSettings.btnAdd\"\n      :visible.sync=\"visibleConfig_value.add\"\n      width=\"50%\"\n      @close=\"doValueAddClose\"\n    >\n      <span>\n        <el-form ref=\"addValueFormRef\" :model=\"addValueForm\" :rules=\"checkValueRules\" label-width=\"120px\">\n          <el-form-item label=\"真实值\" prop=\"dictRealValue\">\n            <el-input v-model=\"addValueForm.dictRealValue\" />\n          </el-form-item>\n          <el-form-item label=\"展示值\" prop=\"dictValue\">\n            <el-input v-model=\"addValueForm.dictValue\" />\n          </el-form-item>\n          <el-form-item label=\"字典顺序\" prop=\"dictOrder\">\n            <el-input-number v-model=\"addValueForm.dictOrder\" controls-position=\"right\" :min=\"1\" :max=\"100\" />\n          </el-form-item>\n        </el-form>\n      </span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          @click=\"visibleConfig_value.add = false\"\n        >{{ defaultSettings.cancelButtonText }}</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"doValueAddSave\"\n        >{{ defaultSettings.confirmButtonText }}</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 字典值编辑 -->\n    <el-dialog\n      :title=\"defaultSettings.btnEdit\"\n      :visible.sync=\"visibleConfig_value.edit\"\n      width=\"50%\"\n      @close=\"doValueEditClose\"\n    >\n      <span>\n        <el-form ref=\"editValueFormRef\" :model=\"editValueForm\" :rules=\"checkValueRules\" label-width=\"120px\">\n          <el-form-item label=\"真实值\" prop=\"dictRealValue\">\n            <el-input v-model=\"editValueForm.dictRealValue\" />\n          </el-form-item>\n          <el-form-item label=\"展示值\" prop=\"dictValue\">\n            <el-input v-model=\"editValueForm.dictValue\" />\n          </el-form-item>\n          <el-form-item label=\"字典顺序\" prop=\"dictOrder\">\n            <el-input-number v-model=\"editValueForm.dictOrder\" controls-position=\"right\" :min=\"1\" :max=\"100\" />\n          </el-form-item>\n        </el-form>\n      </span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          @click=\"visibleConfig_value.edit = false\"\n        >{{ defaultSettings.cancelButtonText }}</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"doValueEditSave\"\n        >{{ defaultSettings.confirmButtonText }}</el-button>\n      </span>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nimport defaultSettings from '@/settings'\nimport {\n  doAddSave,\n  doDelete,\n  doEditSave,\n  doValueAddSave,\n  doValueDelete,\n  doView,\n  getPageList,\n  getValuePageList,\n  doValueEditSave,\n  doValueView\n} from '@/api/system/sysdictkey/SysDictKey'\nimport { dictKeyValidate } from '@/utils/validate'\n\nexport default {\n  name: 'SysDictKey',\n  data() {\n    return {\n      defaultSettings: defaultSettings,\n\n      // 查询参数对象\n      searchForm: {\n        current: 1\n      },\n      // 列表数据\n      gridData: {\n        list: [],\n        total: 0\n      },\n\n      // 当前选中行\n      currentRow: null,\n\n      // 对话框是否展示配置\n      visibleConfig: {\n        add: false,\n        edit: false\n      },\n\n      // 添加或编辑对话框校验规则\n      addCheckRules: {\n        dictKey: [{ required: true, message: '请输入字典项', trigger: 'blur' },\n          { validator: dictKeyValidate, trigger: 'blur' }],\n        dictName: [{ required: true, message: '请输入字典名称', trigger: 'blur' }],\n        dictDesc: [{ required: true, message: '请输入字典描述', trigger: 'blur' }]\n      },\n      editCheckRules: {\n        dictKey: [{ required: true, message: '请输入字典项', trigger: 'blur' }],\n        dictName: [{ required: true, message: '请输入字典名称', trigger: 'blur' }],\n        dictDesc: [{ required: true, message: '请输入字典描述', trigger: 'blur' }]\n      },\n\n      // 查看数据\n      viewForm: {},\n\n      // 添加对话框数据\n      addForm: {},\n\n      // 编辑对话框数据\n      editForm: {},\n\n      /**\n         * 字典值参数\n         */\n      searchForm_value: {\n        current: 1,\n        size: -1,\n        dictKeyId: ''\n      },\n      gridData_value: {\n        list: []\n      },\n      visibleConfig_value: {\n        add: false,\n        edit: false\n      },\n      addValueForm: {},\n      editValueForm: {},\n      checkValueRules: {\n        dictValue: [{ required: true, message: '请输入展示值', trigger: 'blur' }],\n        dictRealValue: [{ required: true, message: '请输入真实值', trigger: 'blur' }],\n        dictOrder: [{ required: true, message: '请输入字典顺序', trigger: 'blur' }]\n      }\n    }\n  },\n  created() {\n    this.getPageList()\n  },\n  methods: {\n\n    // 列表查询\n    getPageList() {\n      getPageList(this.searchForm).then((res) => {\n        const { records, total } = res.data\n        this.gridData.list = records\n        this.gridData.total = total\n\n        // 搜索时清除字典值表\n        this.searchForm_value.dictKeyId = ''\n        this.gridData_value.list = []\n      }).catch(() => {\n        this.$message.error(defaultSettings.failureSearch)\n      })\n    },\n\n    // 分页栏页数改变监听\n    handleCurrentChange(newCurrent) {\n      this.searchForm.current = newCurrent\n      this.getPageList()\n    },\n\n    // 删除\n    doDelete(id) {\n      const rowId = id\n      this.$confirm(defaultSettings.deleteText, defaultSettings.typeInfoText, {\n        confirmButtonText: defaultSettings.confirmButtonText,\n        cancelButtonText: defaultSettings.cancelButtonText,\n        type: defaultSettings.typeWarning\n      }).then(\n        async() => {\n          doDelete(rowId).then(() => {\n            this.$message.success(defaultSettings.successDelete)\n            this.getPageList()\n          })\n        })\n    },\n\n    // 添加-保存\n    doAddSave() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        await doAddSave(this.addForm)\n        this.$message.success(defaultSettings.successAdd)\n        this.visibleConfig.add = false\n        this.getPageList()\n      })\n    },\n    // 添加-关闭\n    doAddClose() {\n      this.$refs.addFormRef.resetFields()\n    },\n\n    // 编辑\n    async doEdit(id) {\n      const res = await doView(id)\n      this.editForm = res.data\n      this.visibleConfig.edit = true\n    },\n\n    // 编辑-保存\n    doEditSave() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        await doEditSave(this.editForm)\n        this.$message.success(defaultSettings.successEdit)\n        this.visibleConfig.edit = false\n        this.getPageList()\n      })\n    },\n\n    // 编辑-关闭\n    doEditClose() {\n      this.$refs.editFormRef.resetFields()\n    },\n\n    // 字典项表格行点击事件\n    dictKeyRowClick(row) {\n      // 查询字典值表\n      this.searchForm_value.dictKeyId = row.id\n      this.getValuePageList()\n    },\n\n    // 当前行改变\n    handleRowChange(currentRow) {\n      this.currentRow = currentRow\n    },\n\n    /**\n       *字典值表方法\n       */\n    getValuePageList() {\n      getValuePageList(this.searchForm_value).then((res) => {\n        const { records } = res.data\n        this.gridData_value.list = records\n      }).catch(() => {\n        this.$message.error(defaultSettings.failureSearch)\n      })\n    },\n\n    // 字典值添加按钮点击\n    dictValueAdd() {\n      if (this.currentRow == null) {\n        this.$message.error('请先选择字典项')\n        return\n      }\n      this.addValueForm.dictKeyId = this.currentRow.id\n      this.visibleConfig_value.add = true\n    },\n\n    // 字典值添加-关闭\n    doValueAddClose() {\n      this.$refs.addValueFormRef.resetFields()\n    },\n    // 字典值保存\n    doValueAddSave() {\n      this.$refs.addValueFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        await doValueAddSave(this.addValueForm)\n        this.$message.success(defaultSettings.successAdd)\n        this.visibleConfig_value.add = false\n        this.getValuePageList()\n      })\n    },\n\n    // 字典值删除\n    doValueDelete(id) {\n      const rowId = id\n      this.$confirm(defaultSettings.deleteText, defaultSettings.typeInfoText, {\n        confirmButtonText: defaultSettings.confirmButtonText,\n        cancelButtonText: defaultSettings.cancelButtonText,\n        type: defaultSettings.typeWarning\n      }).then(\n        async() => {\n          doValueDelete(rowId).then(() => {\n            this.$message.success(defaultSettings.successDelete)\n            this.getValuePageList()\n          })\n        })\n    },\n    // 编辑\n    async doValueEdit(id) {\n      const res = await doValueView(id)\n      this.editValueForm = res.data\n      this.visibleConfig_value.edit = true\n    },\n    // 编辑-保存\n    doValueEditSave() {\n      this.$refs.editValueFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        await doValueEditSave(this.editValueForm)\n        this.$message.success(defaultSettings.successEdit)\n        this.visibleConfig_value.edit = false\n        this.getValuePageList()\n      })\n    },\n\n    // 编辑-关闭\n    doValueEditClose() {\n      this.$refs.editValueFormRef.resetFields()\n    },\n\n    refreshCache() {\n      this.$dictMap = {}\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n  .dict_key-class {\n    margin-right: -5px;\n  }\n\n  .dict-value-class {\n    margin-left: -5px;\n  }\n</style>\n"]}]}