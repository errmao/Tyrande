{"remainingRequest":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\other4\\Tyrande\\tyrande-ui\\src\\utils\\validate.js","dependencies":[{"path":"D:\\other4\\Tyrande\\tyrande-ui\\src\\utils\\validate.js","mtime":1597643615000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\other4\\Tyrande\\tyrande-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CgovKioKICogQ3JlYXRlZCBieSBQYW5KaWFDaGVuIG9uIDE2LzExLzE4LgogKi8KaW1wb3J0IHsgY2hlY2tEaWN0S2V5IH0gZnJvbSAnQC9hcGkvc3lzdGVtL3N5c2RpY3RrZXkvU3lzRGljdEtleSc7Ci8qKgogKiBAcGFyYW0ge3N0cmluZ30gcGF0aAogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNFeHRlcm5hbChwYXRoKSB7CiAgcmV0dXJuIC9eKGh0dHBzPzp8bWFpbHRvOnx0ZWw6KS8udGVzdChwYXRoKTsKfQovKioKICogQHBhcmFtIHtzdHJpbmd9IHN0cgogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICovCgpleHBvcnQgZnVuY3Rpb24gdmFsaWRVc2VybmFtZShzdHIpIHsKICB2YXIgdmFsaWRfbWFwID0gWydhZG1pbicsICdlZGl0b3InXTsKICByZXR1cm4gdmFsaWRfbWFwLmluZGV4T2Yoc3RyLnRyaW0oKSkgPj0gMDsKfQovKioKICog6Iux5paH5oiW5pWw5a2XCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQW5kU2UocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgdmFyIHJlZyA9IC9eW2EtekEtWjAtOV0rJC87CgogIGlmICh2YWx1ZSA9PSAnJyB8fCB2YWx1ZSA9PSB1bmRlZmluZWQgfHwgdmFsdWUgPT0gbnVsbCkgewogICAgY2FsbGJhY2soKTsKICB9IGVsc2UgewogICAgaWYgKCFyZWcudGVzdCh2YWx1ZSkpIHsKICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCfku4XnlLHoi7HmloflrZfmr43mlbDlrZfnu4TmiJAnKSk7CiAgICB9IGVsc2UgewogICAgICBjYWxsYmFjaygpOwogICAgfQogIH0KfQovKioKICog5a2X5YW46aG55LiN6IO96YeN5aSN5re75YqgCiAqIEBwYXJhbSBydWxlCiAqIEBwYXJhbSB2YWx1ZQogKiBAcGFyYW0gY2FsbGJhY2sKICovCgpleHBvcnQgZnVuY3Rpb24gZGljdEtleVZhbGlkYXRlKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgewogIGNoZWNrRGljdEtleSh2YWx1ZSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICBpZiAocmVzLmRhdGEgPT0gbnVsbCkgewogICAgICBjYWxsYmFjaygpOwogICAgfSBlbHNlIHsKICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCflrZflhbjpobnlt7LlrZjlnKgnKSk7CiAgICB9CiAgfSk7Cn0="},{"version":3,"sources":["D:/other4/Tyrande/tyrande-ui/src/utils/validate.js"],"names":["checkDictKey","isExternal","path","test","validUsername","str","valid_map","indexOf","trim","isNumberAndSe","rule","value","callback","reg","undefined","Error","dictKeyValidate","then","res","data"],"mappings":";;;AAAA;;;AAGA,SAASA,YAAT,QAA6B,oCAA7B;AAEA;;;;;AAIA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO,0BAA0BC,IAA1B,CAA+BD,IAA/B,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,QAAV,CAAlB;AACA,SAAOA,SAAS,CAACC,OAAV,CAAkBF,GAAG,CAACG,IAAJ,EAAlB,KAAiC,CAAxC;AACD;AAED;;;;AAGA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AACnD,MAAMC,GAAG,GAAG,gBAAZ;;AACA,MAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,IAAIG,SAAxB,IAAqCH,KAAK,IAAI,IAAlD,EAAwD;AACtDC,IAAAA,QAAQ;AACT,GAFD,MAEO;AACL,QAAI,CAACC,GAAG,CAACV,IAAJ,CAASQ,KAAT,CAAL,EAAsB;AACpBC,MAAAA,QAAQ,CAAC,IAAIG,KAAJ,CAAU,YAAV,CAAD,CAAR;AACD,KAFD,MAEO;AACLH,MAAAA,QAAQ;AACT;AACF;AACF;AAED;;;;;;;AAMA,OAAO,SAASI,eAAT,CAAyBN,IAAzB,EAA+BC,KAA/B,EAAsCC,QAAtC,EAAgD;AACrDZ,EAAAA,YAAY,CAACW,KAAD,CAAZ,CAAoBM,IAApB,CAAyB,UAAAC,GAAG,EAAI;AAC9B,QAAIA,GAAG,CAACC,IAAJ,IAAY,IAAhB,EAAsB;AACpBP,MAAAA,QAAQ;AACT,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,IAAIG,KAAJ,CAAU,QAAV,CAAD,CAAR;AACD;AACF,GAND;AAOD","sourcesContent":["/**\n * Created by PanJiaChen on 16/11/18.\n */\nimport { checkDictKey } from '@/api/system/sysdictkey/SysDictKey'\n\n/**\n * @param {string} path\n * @returns {Boolean}\n */\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n\n/**\n * @param {string} str\n * @returns {Boolean}\n */\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n\n/**\n * 英文或数字\n */\nexport function isNumberAndSe(rule, value, callback) {\n  const reg = /^[a-zA-Z0-9]+$/\n  if (value == '' || value == undefined || value == null) {\n    callback()\n  } else {\n    if (!reg.test(value)) {\n      callback(new Error('仅由英文字母数字组成'))\n    } else {\n      callback()\n    }\n  }\n}\n\n/**\n * 字典项不能重复添加\n * @param rule\n * @param value\n * @param callback\n */\nexport function dictKeyValidate(rule, value, callback) {\n  checkDictKey(value).then(res => {\n    if (res.data == null) {\n      callback()\n    } else {\n      callback(new Error('字典项已存在'))\n    }\n  })\n}\n"]}]}